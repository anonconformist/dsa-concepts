// applications of data structures

Decision Making
Genetics
Image Processing
Blockchain
Numerical and Statistical Analysis
Compiler Design
Database Design and many more


The difference is that the storage structure has data stored in the memory of the computer system,
 whereas the file structure has the data stored in the auxiliary memory.


// Following are some applications for stack data structure:

It acts as temporary storage during recursive operations
Redo and Undo operations in doc editors
Reversing a string
Parenthesis matching
Postfix to Infix Expressions
Function calls order


// Following are some applications of queue data structure:

Breadth-first search algorithm in graphs
Operating system: job scheduling operations, Disk scheduling, CPU scheduling etc.
Call management in call centres


// stack can be made using two queues

1. By making push operation costly:
push(s, data):
    Enqueue data to q2
    Dequeue elements one by one from q1 and enqueue to q2.
    Swap the names of q1 and q2

pop(s):
dequeue from q1 and return it.

2. By making pop operation costly:
push(s,data):
Enqueue data to q1

pop(s): 
	Step1: Dequeue every elements except the last element from q1 and enqueue to q2.
	Step2: Dequeue the last item of q1, the dequeued item is stored in result variable.
 	Step3: Swap the names of q1 and q2 (for getting updated data after dequeue) 
 	Step4: Return the result.


// queue can be made using two stacks

1. By making enqueue operation costly:
enqueue(q, data):  
While stack1 is not empty:
     Push everything from stack1 to stack2.
      Push data to stack1
      Push everything back to stack1.

deQueue(q):
 If stack1 is empty then error  else
 Pop an item from stack1 and return it

2. By making the dequeue operation costly:
enqueue(q, data):    
Push data to stack1

dequeue(q): 
If both stacks are empty then raise error.
If stack2 is empty:  
While stack1 is not empty:
 push everything from stack1 to stack2. 
  Pop the element from stack2 and return it.


